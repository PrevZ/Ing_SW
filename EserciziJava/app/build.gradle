/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'java'
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation libs.guava
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Task per eseguire esercizi specifici
task runExercise(type: JavaExec) {
    group = 'application'
    description = 'Run a specific exercise'
    
    if (project.hasProperty('exercise')) {
        def exerciseNum = project.property('exercise')
        
        // Determina la classe principale basata sull'esercizio
        switch(exerciseNum) {
            case 'Es01':
                main = 'Es01.Main'
                break
            case 'Es02':
                main = 'Es02.Main'
                break
            case 'Es03':
                main = 'Es03.Main'
                break
            case 'Es04':
                main = 'Es04.Main'
                break
            case 'Es05':
                main = 'Es05.Main'
                break
            case 'Es06':
                main = 'Es06.Main'
                break
            case 'Es07':
                main = 'Es07.Main'
                break
            case 'Es08':
                main = 'Es8.Main'
                break
            case 'Es09':
                main = 'Es9.Main'
                break
            case 'Es10':
                main = 'Es10.Main'
                break
            case 'Es11':
                main = 'Es11.Main'
                break
            case 'Es12':
                main = 'Es12.Main'
                break
            case 'Es13':
                main = 'Es13.RubricaTelefonica'
                break
            case 'Es14':
                main = 'Es14.SommaDaInput'
                break
            case 'Es15':
                main = 'Es15.TestForme'
                break
            case 'Es16':
                main = 'Es16.RegistroStudenti'
                break
            case 'Es17':
                main = 'Es17.FiltroNumeriPari'
                break
            case 'Es18':
                main = 'Es18.TestAnimali'
                break
            case 'Es19':
                main = 'Es19.TestContatore'
                break
            case 'Es20':
                main = 'Es20.ClassificaSportiva'
                break
            case 'Es21':
                main = 'Es21.TestPersona'
                break
            case 'Es22':
                main = 'Es22.Calcolatrice'
                break
            case 'Es23':
                main = 'Es23.MagazzinoProdotti'
                break
            case 'Es24':
                main = 'Es24.RegistroPresenze'
                break
            case 'Es25':
                // Es25 non ha una classe Main
                throw new GradleException("Es25 non ha una classe principale eseguibile")
                break
            case 'Es26':
                main = 'Es26.ParoleLunghe'
                break
            case 'Es27':
                main = 'Es27.Biblioteca'
                break
            case 'Es28':
                main = 'Es28.TestStack'
                break
            case 'Es29':
                main = 'Es29.Scacchiera'
                break
            case 'Es30':
                main = 'Es30.OrdinaParole'
                break
            case 'Es31':
                main = 'Es31.TestPagabile'
                break
            case 'Es32':
                main = 'Es32.DiarioDiBordo'
                break
            case 'Es33':
                main = 'Es33.CinemaPrenotazioni'
                break
            case 'Es34':
                main = 'Es34.GestioneOrdini'
                break
            case 'Es35':
                main = 'Es35.RegistroMedico'
                break
            case 'Es36':
                main = 'Es36.GestioneCatalogo'
                break
            case 'Es37':
                main = 'Es37.SistemaBancario'
                break
            case 'Es38':
                main = 'Es38.GestioneFileStudenti'
                break
            case 'Es39':
                main = 'Es39.ParserJSONManuale'
                break
            case 'Es40':
                main = 'Es40.MagazzinoMulticlasse'
                break
            case 'Es41':
                main = 'Es41.GestionePlaylist'
                break
            case 'Es42':
                main = 'Es42.RubricaAvanzata'
                break
            case 'Es43':
                main = 'Es43.SistemaLogin'
                break
            case 'Es44':
                main = 'Es44.TestLogger'
                break
            case 'Es45':
                main = 'Es45.GestioneParcheggio'
                break
            default:
                main = 'Main'
        }
        
        classpath = sourceSets.main.runtimeClasspath
        
        // Passa gli argomenti se forniti
        if (project.hasProperty('args')) {
            args = project.property('args').split(',')
        }
    }
}

// Task per compilare tutti gli esercizi
task compileAllExercises {
    group = 'build'
    description = 'Compile all exercises'
    dependsOn 'compileJava'
}

// Task per elencare esercizi disponibili
task listExercises {
    group = 'help'
    description = 'List all available exercises'
    doLast {
        println "Esercizi disponibili:"
        def exercises = [
            'Es01': 'Sistema di Veicoli (interfacce, polimorfismo)',
            'Es02': 'Sistema Biblioteca (ereditarietà, gestione materiali)',
            'Es03': 'Gestione Animali (classi astratte, polimorfismo)',
            'Es04': 'Sistema Aziendale (ereditarietà, calcolo stipendi)',
            'Es05': 'Sistema Prenotazioni Viaggi (interfacce, eccezioni)',
            'Es06': 'Sistema Pagamenti (interfacce, gestione eccezioni)',
            'Es07': 'Framework Ordinamento (Strategy pattern, Sortable)',
            'Es08': 'Sistema Biblioteca Avanzato (prestiti, gestione stato)',
            'Es09': 'Sistema Universitario (modellazione complessa, interfacce)',
            'Es10': 'Catalogo Multimediale (polimorfismo, interfacce)',
            'Es11': 'Sistema Ospedaliero (associazioni complesse)',
            'Es12': 'Sistema Sviluppo Software (ereditarietà, team)',
            'Es13': 'Rubrica Telefonica (gestione contatti)',
            'Es14': 'Somma da Input (args[], parsing, eccezioni)',
            'Es15': 'Forme Geometriche (classi astratte, calcolo area)',
            'Es16': 'Registro Studenti (ArrayList, calcolo medie)',
            'Es17': 'Filtro Numeri Pari (cicli, array, filtri)',
            'Es18': 'Animali Semplificati (classi astratte, versi)',
            'Es19': 'Contatore Generico (generics, tipi parametrizzati)',
            'Es20': 'Classifica Sportiva (ordinamento, squadre)',
            'Es21': 'Gestione Persona (incapsulamento, costruttori)',
            'Es22': 'Calcolatrice CLI (parsing args, switch-case)',
            'Es23': 'Magazzino Prodotti (gestione inventario)',
            'Es24': 'Registro Presenze (Array 2D)',
            'Es25': 'Sistema Macchine (ereditarietà veicoli)',
            'Es26': 'Parole Lunghe (Array + Condizioni)',
            'Es27': 'Biblioteca (ArrayList + Oggetti)',
            'Es28': 'Stack Personalizzato (strutture dati, generics)',
            'Es29': 'Scacchiera (Array 2D + Logica)',
            'Es30': 'Ordinamento Parole (algoritmi ordinamento)',
            'Es31': 'Interfaccia Pagabile (Interfacce)',
            'Es32': 'Diario di Bordo (ArrayList + Date)',
            'Es33': 'Sistema di Prenotazione Cinema (OOP + ArrayList + Logica)',
            'Es34': 'Gestione Ordini con Interfacce (Interfaccia + ArrayList + Polimorfismo)',
            'Es35': 'Registro Medico (visite, pazienti, medici)',
            'Es36': 'Gestione Catalogo Prodotti con Filtri (Generics + Funzioni + Filtri)',
            'Es37': 'Sistema Banca (Classi astratte + Ereditarietà + Overriding)',
            'Es38': 'Gestione File Studenti (File I/O + ArrayList + Parsing)',
            'Es39': 'Parser JSON Manuale (Stringhe + Logica + ArrayList)',
            'Es40': 'Magazzino Multiclasse (prodotti categorizzati)',
            'Es41': 'Gestione Playlist (ArrayList + Oggetti + Metodi Statici)',
            'Es42': 'Rubrica con Ricerca Avanzata (ArrayList + Stream-like)',
            'Es43': 'Sistema di Login (HashMap + Stringhe + Sicurezza base)',
            'Es44': 'File Logger (FileWriter + Singleton + Data)',
            'Es45': 'Gestione Parcheggio (prenotazioni, posti auto)'
        ]
        
        exercises.each { key, value ->
            println "  - ${key}: ${value}"
        }
    }
}
